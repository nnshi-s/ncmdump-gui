// generated by Fast Light User Interface Designer (fluid) version 1.0307

#ifndef ui_h
#define ui_h
#include <thread>
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Progress.H>
#include <FL/Fl_Text_Display.H>

class user_interface
{
public:
	user_interface();
	~user_interface();

	void set_progress(const float f);
	void set_progress_if_higher(const float f){ if (f > get_progress()) set_progress(f);}
	float get_progress() const { return progressbar_->value(); }

	void set_skip() { check_skip_->set(); }
	void clr_skip() { check_skip_->clear(); }
	bool get_skip() const { return check_skip_->value(); }

	void set_delete() { check_delete_->set(); }
	void clr_delete() { check_delete_->clear(); }
	bool get_delete() const { return check_delete_->value(); }

	void set_stop() { stop_ = true; }
	void clr_stop() { stop_ = false; }
	bool get_stop() const { return stop_; }

	const char *get_path() const { return input_path_->value(); }
	void set_path(const char *s) { input_path_->value(s); }

	void log_append(const char *s);
	void log_clear() { text_buffer_->remove(0, text_buffer_->length()); }

	void deactivate_btn_go() { btn_go_->deactivate(); }
	void activate_btn_go() { btn_go_->activate(); }

	void text_display_set_pos(const int pos)
	{
		text_disp_log_->insert_position(pos);
		text_disp_log_->show_insert_position();
	}

	void bind_callbacks();

	std::thread *converter_thread = nullptr;
	
private:
	Fl_Input* input_path_ = nullptr;
	Fl_Button* btn_sel_path_ = nullptr;
	Fl_Check_Button* check_skip_ = nullptr;
	Fl_Check_Button* check_delete_ = nullptr;
	Fl_Button* btn_stop_ = nullptr;
	Fl_Button* btn_go_ = nullptr;
	Fl_Progress* progressbar_ = nullptr;
	Fl_Text_Display *text_disp_log_ = nullptr;

	bool stop_ = false;

	Fl_Text_Buffer *text_buffer_ = nullptr;

};
#endif
